Discussion
----------

1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.


A doubly linked list would be the best choice. Doubly linked lists allow you to efficiently add items to the beginning of the structure, as well as traverse the structure in both directions (front beginning to end and from end to beginning) in the case of needing to index or search. That being said, depending on the use case a singly linked list may work just as well.


2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

A dictionary is the best choice for this use case because it allows you to look items up by a key, and has efficient add/delete mechanism. Lists are less efficient for lookup and are ordered, which is unnecessary in this case. Deque's and Binary Search Trees are not as efficient for lookup. 

3. Explain why looking up, adding elements, and removing elements from a 
   dictionary or hash map are all O(1) operations.

Hash maps allow us to avoid the iteration of every element in order to add or remove an item from a structure. Hashing is a system that points to a particular memory location, which is the basis of the lookup system for dictionaries. Regular lists do not have their pieces of data tied to a particular hash, and must be iterated over in order to find data that matches a particular query.

4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.

In order to find an item in a list you must iterate over items in the list until you find the item matching your query. O(n) refers to the worst case scenario, in which the item you are searching for is at the very end of the list, meaning you would have to check every single item in the list for a match against your query, eventually ending up at the last item. 


5. What is the correct runtime for:

  - Bubble Sort?

  - Quicksort?

  - Merge Sort?

  - Insertion Sort?


6. What is the difference between a tree and a graph?

A tree is a type of graph! But graphs can have more functionality than a tree, such as "loops" where connections go in more than one direction.


7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

    - lst -

    - pivot -

    - lo -

    - hi -



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:

  - lst -

  - pivot -

  - lo -

  - hi -
